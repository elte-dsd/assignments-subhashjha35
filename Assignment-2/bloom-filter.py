# -*- coding: utf-8 -*-
"""BloomFilter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1296hpEOkk8OFy_kqrLk5XEna7SUNaRO8
"""

#Bloom Filter Logic is placed here.
class BloomFilter:
    #here we initialize the BloomFilter and Bitmap size.
    def __init__(self, size = 200, hashFunctions = None):
        self.bits = 0
        self.size = size
        valStream = [];
        if hashFunctions is None:
            self.k = 1
            self.hashFunctions = [lambda elem, size: hash(elem) % size]
        else:
            self.k = len(hashFunctions)
            self.hashFunctions = hashFunctions

    #Getting the input in form of an array
    def getStream(self, valStream):
        for hf in self.hashFunctions:
          for val in valStream:
            self.bits |= 1 << hf(val, self.size)

    #Checking the existence of a string in the array
    def findStr(self, value):
        for hf in self.hashFunctions:
            if self.bits & 1 << hf(value, self.size) == 0:
                return False
            else:
                return True

#input your Stream using comma. press carriage return to stop receiving input
print('input your Stream using comma')
inputStream = list(map(str, input().split(',')))

x = BloomFilter()
x.getStream(inputStream)

# Let's check whether the stream contains the strings or not.
print('input your strings to search using comma')
containsStream = list(map(str, input().split(',')))
for val in containsStream:
  print(val, str(x.findStr(val)))
# print(x.findStr('hello'))
# print(x.findStr('world'))